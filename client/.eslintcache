[{"D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\index.js":"1","D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\components\\App.js":"2","D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\components\\Registration.js":"3","D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\components\\Login.js":"4","D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\game\\online\\publicRoom.js":"5"},{"size":159,"mtime":1611082596777,"results":"6","hashOfConfig":"7"},{"size":4050,"mtime":1611523819727,"results":"8","hashOfConfig":"7"},{"size":2084,"mtime":1611082678810,"results":"9","hashOfConfig":"7"},{"size":2922,"mtime":1611524708360,"results":"10","hashOfConfig":"7"},{"size":905,"mtime":1611082678810,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"kzx9t8",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\index.js",[],["28","29"],"D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\components\\App.js",["30"],"import axios from 'axios'; // might want to use axios for all requests later [TBD]\r\nimport React, { useState, useEffect } from 'react';\r\nimport Registration from './Registration';\r\nimport Login from './Login';\r\nimport io from 'socket.io-client';\r\n//import join from '../game/online/publicRoom'; <-- test this by adding some button\r\n\r\n// Root container for every other component/ component group.\r\n//If you can - group components within one to avoid this component to become\r\n//too lengty and too detailed\r\nlet socket;\r\nlet timeout;\r\n\r\nconst App = () => {\r\n\r\n    const [activePlayers, setActivePlayers] = useState(0);\r\n\r\n    useEffect(() => {\r\n        join();\r\n    }, []);\r\n\r\n    const join = () => {\r\n\r\n        socket = io(process.env.REACT_APP_API_BASE_ADDRESS, {\r\n            reconnectionDelayMax: 10000,\r\n            // auth: (cb) => {\r\n            //     cb({\r\n            //         token: localStorage['bearer-token']\r\n            //     });\r\n            // }\r\n            query: {\r\n                token: localStorage['bearer-token']\r\n            }\r\n        });\r\n\r\n        console.log('connection with realtime server established');\r\n\r\n        socket.on('testReceive', (data) => {\r\n            console.log('received user..');\r\n            console.log(data);\r\n        })\r\n\r\n        socket.on('receive-active-players', (data) => {     //gets active players now\r\n            setActivePlayers(data.activePlayers);\r\n        })\r\n\r\n        setInterval(() => {\r\n            socket.emit('get-active-players');\r\n            console.log('counter update');\r\n        }, 5000)\r\n\r\n        socket.on('receive-current-person', (data) => {\r\n            console.log(data);\r\n        })\r\n\r\n        socket.on('random-game-success', () => {\r\n            clearTimeout(timeout);\r\n            console.log('successfully connected to random duel') // <-- from this point on handling from the server\r\n        })\r\n\r\n        socket.on('only-one-game-at-a-time', () => {\r\n            console.log('cant play more than 1 game at once!');\r\n        })\r\n\r\n        socket.on('attempt-random-game-reconnect', (data) => {\r\n            console.log('trying to find players..')\r\n            timeout = setTimeout(() => {\r\n                socket.emit('request-random-game');\r\n            }, 1000);\r\n        })\r\n\r\n        socket.on('session-active-in-another-tab', () => {\r\n            clearTimeout(timeout);\r\n            console.log('Session is active in another tab!');\r\n        })\r\n\r\n        socket.on('opponent-quit', () => {\r\n            console.log('opponent has disconnected!')\r\n        })\r\n\r\n        socket.on('matchmaking-success', (data) => {\r\n            console.log('opponent has been found successfully');\r\n            console.log('The room is: ' + data.roomId);\r\n        })\r\n    }\r\n\r\n    const getUser = () => {\r\n        socket.emit('get-current-person');\r\n    }\r\n\r\n    const randomGame = () => {\r\n        console.log('requested a game');\r\n        socket.emit('request-random-game');\r\n    }\r\n\r\n    const setSessionHere = () => {\r\n        socket.emit('set-session-to-current-tab');\r\n    }\r\n\r\n    // const getUser = async () => {\r\n    //     const endpoint = `${process.env.REACT_APP_API_BASE_ADDRESS}/test`\r\n    //     const res = await fetch(endpoint, {\r\n    //         method: 'GET',\r\n    //         mode: 'cors',\r\n    //         headers: {\r\n    //             'Accept': 'application/json, text/plain',\r\n    //             'Content-Type': 'application/json',\r\n    //         }\r\n    //     });\r\n    //     const payload = await res.json();\r\n    //     console.log(payload);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {/* <button onClick={join}>Test connect</button> */}\r\n            <button onClick={getUser}>Get user</button>\r\n            <button onClick={randomGame}>Random duel</button>\r\n            <button onClick={setSessionHere}>Set session here</button>\r\n            <br />\r\n            <div>Active players</div>\r\n            <div>{activePlayers}</div>\r\n            <Registration />\r\n            <Login />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\components\\Registration.js",["31"],"import axios from 'axios'; \r\nimport React, { useState } from 'react';\r\n\r\nconst Registration = () => {\r\n    const [usernameInput, setUsernameInput] = useState('');\r\n    const [passwordInput, setPasswordInput] = useState('');\r\n    const [emailInput, setEmailInput] = useState('');\r\n\r\n    const handleUsernameChange = (newValue) => {\r\n        setUsernameInput(newValue);\r\n    }\r\n\r\n    const handlePasswordChange = (newValue) => {\r\n        setPasswordInput(newValue);\r\n    }\r\n\r\n    const handleEmailChange = (newValue) => {\r\n        setEmailInput(newValue);\r\n    }\r\n\r\n    const sendRegisterUserForm = async () => {\r\n        const user = {\r\n            username: usernameInput,\r\n            password: passwordInput,\r\n            email: emailInput\r\n        }\r\n        \r\n        const endpoint = `${process.env.REACT_APP_API_BASE_ADDRESS}/api/v1/auth/register`\r\n        const res = await fetch(endpoint, \r\n        {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain',\r\n                'Content-Type': 'application/json;charset=utf-8',\r\n            },\r\n            body: JSON.stringify(user),\r\n        });\r\n        const parsedRes = await res.json();\r\n        console.log(parsedRes);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n                Registration\r\n            <br />\r\n            <div>\r\n                <label>Username</label>\r\n                <input type=\"text\" value={usernameInput} onChange={(e) => handleUsernameChange(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Password</label>\r\n                <input type=\"password\" value={passwordInput} onChange={(e) => handlePasswordChange(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Email</label>\r\n                <input type=\"email\" value={emailInput} onChange={(e) => handleEmailChange(e.target.value)} />\r\n            </div>\r\n            <button onClick={sendRegisterUserForm}>Submit</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\components\\Login.js",["32","33","34"],"import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nrequire('dotenv').config();\r\n\r\nconst Login = () => {\r\n    const [emailInput, setEmailInput] = useState('');\r\n    const [passwordInput, setPasswordInput] = useState('');\r\n    const [userName, setUserName] = useState('');\r\n\r\n    const handleEmailChange = (newValue) => {\r\n        setEmailInput(newValue);\r\n    }\r\n\r\n    const handlePasswordChange = (newValue) => {\r\n        setPasswordInput(newValue);\r\n    }\r\n\r\n    const getInfoOnLoggedUser = async () => {\r\n        const endpoint = `${process.env.REACT_APP_API_BASE_ADDRESS}/api/v1/user/greeting`\r\n        const res = await fetch(endpoint, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain',\r\n                'Authorization': `Bearer ${localStorage['bearer-token']}`,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const payload = await res.json();\r\n        console.log(payload);\r\n\r\n        if (res.status === 200) {\r\n            console.log('works ok');\r\n        }\r\n        else {\r\n            // TODO: Add better error handling towards the user.\r\n            console.error(`Not good ${res}`);\r\n        }\r\n    }\r\n\r\n    const loginUser = async () => {\r\n        const requestBody = {\r\n            email: emailInput,\r\n            password: passwordInput\r\n        }\r\n\r\n        console.log(process.env);\r\n\r\n        const endpoint = `${process.env.REACT_APP_API_BASE_ADDRESS}/api/v1/auth/login`\r\n        const res = await fetch(endpoint, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        });\r\n\r\n        if (res.status === 200) {\r\n            const payload = await res.json();\r\n            localStorage.setItem('bearer-token', payload.token);\r\n            console.log('Logged in.');\r\n        }\r\n        else {\r\n            // TODO: Add better error handling towards the user.\r\n            console.error(`Not good ${res}`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            Login\r\n            <br />\r\n            <div>\r\n                <label>Email</label>\r\n                <input type=\"text\" value={emailInput} onChange={(e) => handleEmailChange(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Password</label>\r\n                <input type=\"password\" value={passwordInput} onChange={(e) => handlePasswordChange(e.target.value)} />\r\n            </div>\r\n            <button onClick={loginUser}>Log in</button>\r\n            <div>The user is {userName}</div>\r\n            <button onClick={getInfoOnLoggedUser}>Logged in test</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n",["35","36"],"D:\\Forks\\socket-auth-feature\\tetris-scramble-client\\client\\src\\game\\online\\publicRoom.js",[],["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":13},{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":13},{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":13},{"ruleId":"43","severity":1,"message":"47","line":2,"column":27,"nodeType":"45","messageId":"46","endLine":2,"endColumn":36},{"ruleId":"43","severity":1,"message":"48","line":8,"column":22,"nodeType":"45","messageId":"46","endLine":8,"endColumn":33},{"ruleId":"39","replacedBy":"49"},{"ruleId":"41","replacedBy":"50"},{"ruleId":"39","replacedBy":"51"},{"ruleId":"41","replacedBy":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'setUserName' is assigned a value but never used.",["53"],["54"],["53"],["54"],"no-global-assign","no-unsafe-negation"]